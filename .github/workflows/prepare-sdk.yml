name: Prepare new SDK BOM version

on:
  workflow_dispatch:
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write

env:
  CI: true

jobs:
  bump-if-needed:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK Tools
        run: |
          sdkmanager "platform-tools" \
                     "platforms;android-34" \
                     "build-tools;34.0.0" \
                     "cmdline-tools;latest" \
                     "ndk;25.2.9519653" \
                     "cmake;3.22.1"

      - name: Generate sdk.properties
        run: |
          echo "wiliotApiKey=${{ secrets.TEST_WILIOT_API_KEY }}" > sdk.properties

      - name: Detect Changed SDK Modules
        id: detect_modules
        run: |
          echo "Detecting changed SDK modules..."

          if [[ "${{ github.event_name }}" == "push" ]]; then
            BASE_SHA="${{ github.event.before }}"
            echo "Detected push event. Comparing commits: $BASE_SHA → HEAD"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            echo "Detected PR merge event. Comparing commits: $BASE_SHA → HEAD"
          else
            echo "Manual run (workflow_dispatch) detected. Scanning all SDK modules..."
            find . -maxdepth 1 -type d -name 'wiliot-*' -exec basename {} \; | sort > changed_sdk_modules.txt
            MODULES=$(tr '\n' ' ' < changed_sdk_modules.txt)
            echo "MODULES=$MODULES" >> $GITHUB_ENV
            echo "skip_pipeline=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          git diff --name-only "$BASE_SHA" HEAD > changed_files.txt || true

          grep -Eo '^wiliot-[^/]+' changed_files.txt | sort -u | sed '/^\s*$/d' > changed_sdk_modules.txt

          if [ -s changed_sdk_modules.txt ]; then
            echo "Modules changed:"
            cat changed_sdk_modules.txt
            MODULES=$(tr '\n' ' ' < changed_sdk_modules.txt)
            echo "MODULES=$MODULES" >> $GITHUB_ENV
            echo "skip_pipeline=false" >> $GITHUB_OUTPUT
          else
            echo "No SDK module changes detected. Skipping."
            echo "skip_pipeline=true" >> $GITHUB_OUTPUT
          fi

      - name: Make script executable
        if: steps.detect_modules.outputs.skip_pipeline != 'true'
        run: chmod +x .scripts/update_versions_with_bom.sh

      - name: Update SDK and BOM Versions
        if: steps.detect_modules.outputs.skip_pipeline != 'true'
        run: ./.scripts/update_versions_with_bom.sh

      - name: Configure Git
        if: steps.detect_modules.outputs.skip_pipeline != 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit Updated Versions
        if: steps.detect_modules.outputs.skip_pipeline != 'true'
        run: |
          git add sdk-versions.gradle
          git commit -m "chore: Bump SDK & BOM versions [skip ci]" || echo "No changes to commit"
          git push origin HEAD

      - name: Run Unit Tests
        if: steps.detect_modules.outputs.skip_pipeline != 'true'
        run: |
          echo "Running tests for modules: $MODULES"
          for module in $MODULES; do
            if [[ "$module" == *"bom"* ]]; then
              echo "⚠️ Skipping tests for $module (no tests expected)"
              continue
            fi
            echo "✅ Running tests for: $module"
            ./gradlew --parallel :$module:testReleaseUnitTest
          done

      - name: Create PR develop to master
        if: steps.detect_modules.outputs.skip_pipeline != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating pull request from develop to master..."
          
          # Check if PR already exists
          if gh pr list --base master --head develop --state open --json number --jq '.[0]'; then
            echo "✅ PR from develop to master already exists. Skipping creation."
          else
            gh pr create \
              --base master \
              --head develop \
              --title "chore: Merge develop to master [SDK Release]" \
              --body "This PR merges the latest SDK and BOM version updates from develop into master."
            echo "✅ Pull request created."
          fi