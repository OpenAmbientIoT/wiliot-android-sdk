package com.wiliot.wiliotcore.contracts

import android.app.Notification
import com.wiliot.wiliotcore.env.EnvironmentWiliot
import com.wiliot.wiliotcore.model.*

/**
 * Contract for the Queue module to send Upstream messages to the Cloud
 */
interface MessageQueueManagerContract {

    /**
     * Used to publish data payload of [BasePacketData]. It is used to publish Data and Meta packets;
     * Note, that actual implementation takes into account
     * [com.wiliot.wiliotcore.model.AdditionalGatewayConfig.DataOutputTrafficFilter]
     * configuration value specified in [com.wiliot.wiliotcore.config.Configuration]
     */
    fun publishPayload(
        payload: MutableSet<BasePacketData>,
    )

    /**
     * Used to publish Mel packets (generic/action-generic) to the Cloud.
     */
    fun publishMel(
        payload: List<MelModulePacket>,
        environmentWiliot: EnvironmentWiliot,
    )

    /**
     * Used to publish any kind of Packet logs. Used for debug purposes only. Note, that logs sending
     * is controlled by the corresponding flag in Queue module configuration (WiliotQueue.configuration.sendLogs)
     */
    suspend fun publishPacketLog(
        payload: List<Any>,
        environmentWiliot: EnvironmentWiliot
    )

    /**
     * Used to publish Ack (acknowledge) payloads generated by GW to the Cloud.
     * Basically, Downstream module triggers such sending.
     *
     * Example:
     * Cloud sent Downlink command to update Bridge firmware. Downstream processes such command,
     * performs Bridge Firmware Update and then it publish Acknowledge payload back to the Cloud
     * to inform Downlink command was successfully executed or failed.
     */
    suspend fun publishMelAck(
        payload: Ack,
        environmentWiliot: EnvironmentWiliot
    )

    /**
     * Used to publish BridgeStatus (BridgeConfig) to the Cloud. All the packets from newly
     * discovered Bridges or from Bridges that changed their configuration are publishes
     * their fresh configuration to the Cloud using this API
     */
    fun publishBridgeStatus(
        payload: List<BridgeStatus>,
        environmentWiliot: EnvironmentWiliot,
    )

    /**
     * Used to publish Bridge Heartbeat packets
     */
    fun publishBridgeHb(payload: List<BridgeHbPacketAbstract>, environmentWiliot: EnvironmentWiliot)

    /**
     * Performs initialisation of Actor and Scope for the Queue module. It is similar to
     * [com.wiliot.wiliotcore.contracts.CommandsQueueManagerContract.ensureUploadQueueActive].
     * Should be used on Upstream service startup
     */
    fun initActorAsync()

    /**
     * Used to drop MQTT connections. Common use-case is turning GW mode off.
     *
     * [withScope] flag determines if there is a need to cancel the Scope in which MQTT connection
     * works. In case whole SDK (GW mode) turning off, 'true' should be used. In case there is a
     * need only to drop MQTT connection (with intention to establish it later) but not turning off
     * whole SDK (GW Mode), 'false' should be used.
     */
    fun releaseConnections(withScope: Boolean = true)

    /**
     * Cancels the job of connection monitoring. Should be used at Upstream Service stopping.
     * Explanation:
     * In case, if SDK runs as non-CloudManaged, it creates
     * special job to monitor MQTT connection expediency. This job is designed to temporarily drop
     * MQTT connection in case there is no data to send to the Cloud (no BT Packets for more
     * then X minutes); once SDK will receive BT packet again it will establish MQTT connection again.
     */
    fun stopConnectionMonitoring()

    /**
     * Used to publish Ack (acknowledge) payloads generated by Bridges (and transmitted via Bluetooth).
     *
     * Example:
     * Cloud sent Downlink command to update Bridge configuration. Downstream processes such command,
     * transmits special BT packet to update Bridge config and then Bridge broadcast Acknowledge BT
     * packet that approves that new configuration was applied. SDK publish this Ack BT packet to
     * the Cloud.
     */
    suspend fun publishBridgeAckAction(payload: List<Any>, environmentWiliot: EnvironmentWiliot)

    /**
     * Used to publish SDK (GW) capabilities set to the Cloud. It includes SDK configuration,
     * special flags etc. Used once SDK (GW mode) was started.
     */
    fun publishCapabilities()

    /**
     * Used to publish Gateway Heartbeat packets to the Cloud..
     */
    fun publishGatewayHeartbeat()

    /**
     * Used to make transport service running as Foreground Service. Used at Upstream startup, or as
     * nested implementation of [com.wiliot.wiliotcore.contracts.CommandsQueueManagerContract.goTransportServiceForeground]
     */
    fun bindMqttToForeground(notification: Notification)
}
